---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import { Image } from "astro:assets";
import shirtModel from "../assets/images/3d-tshirt-model.jpg";
import aiOffice from "../assets/images/ai-office-assist.jpg";
import aiAnalyzer from "../assets/images/ai-helping-user-identify-image.jpg";

type Category = "research" | "advance";
type CategoryKey = Lowercase<Category>;

// Props interface for post data
interface Props {
  postTitle?: string;
  postCategory?: string;
  isPostPage?: boolean;
}

const { postTitle, postCategory, isPostPage = false } = Astro.props;

// Get all posts and sort by category
const researchPosts = await getCollection("research");
const advancePosts = await getCollection("advance");

// Create a map of categories to their recent posts
const postsByCategory: Record<
  CategoryKey,
  CollectionEntry<"research" | "advance">[]
> = {
  research: researchPosts
    .sort(
      (a, b) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    )
    .slice(0, 5),
  advance: advancePosts
    .sort(
      (a, b) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    )
    .slice(0, 5),
};

const categories = ["Research", "Advance"] as const;
type CategoryDisplay = (typeof categories)[number];
---

<div class="fixed inset-y-0 left-0 z-[100]">
  <div
    class="fixed inset-0 bg-black/50 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out"
    id="overlay"
  >
  </div>

  <button
    class="fixed top-[255px] left-4 z-[110] flex md:hidden items-center justify-center w-10 h-10 bg-accent text-black rounded-md shadow-lg hover:bg-accent/80 transition-all duration-200 ease-in-out"
    id="toggleButton"
  >
    <span class="sr-only">Toggle Sidebar</span>
    <svg
      class="w-7 h-7"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M4 6h16M4 12h16m-16 6h16"></path>
    </svg>
  </button>

  <!-- Quick Navigation Bar (appears on scroll) - positioned above the sidebar -->
  {isPostPage && (
    <div 
      id="quickNav" 
      class="fixed left-0 top-0 w-[88vw] h-[72px] md:h-[235px] bg-gradient-to-r from-blue-50 to-indigo-50 border-r border-gray-200 shadow-lg transform md:translate-x-0 -translate-x-full transition-all duration-500 ease-in-out lg:w-[33vw] md:w-[39vw] sm:w-[69vw] z-[99] opacity-0"
    >
      <div class="h-full flex flex-col justify-center p-6 space-y-4">
        <div class="p-4 space-y-3">
          <!-- Post Title -->
          <div class="flex items-center justify-between">
            <div class="flex-1 min-w-0">
              <h3 class="text-sm font-semibold text-gray-800 truncate leading-tight" title={postTitle}>
                {postTitle}
              </h3>
              {postCategory && (
                <span class="inline-block mt-1 px-2 py-1 text-xs font-medium bg-accent/20 text-gray-700 rounded-full">
                  {postCategory}
                </span>
              )}
            </div>
          </div>
          
          <!-- Reading Progress Bar -->
          <div class="space-y-2">
            <div class="flex justify-between text-xs text-gray-600">
              <span>Reading Progress</span>
              <span id="progressPercent">0%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div 
                id="progressBar" 
                class="bg-gradient-to-r from-blue-500 to-indigo-600 h-2 rounded-full transition-all duration-300 ease-out"
                style="width: 0%"
              ></div>
            </div>
          </div>
          
          <!-- Quick Action Buttons -->
          <div class="flex justify-between items-center pt-2">
            <button 
              id="backToTop" 
              class="flex items-center space-x-2 px-3 py-2 text-xs font-medium text-gray-700 bg-white/80 hover:bg-white rounded-lg transition-colors duration-200 shadow-sm hover:shadow-md"
              title="Back to Top"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
              </svg>
              <span>Top</span>
            </button>
            
            <button 
              id="sharePost" 
              class="flex items-center space-x-2 px-3 py-2 text-xs font-medium text-gray-700 bg-white/80 hover:bg-white rounded-lg transition-colors duration-200 shadow-sm hover:shadow-md"
              title="Share Post"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
              </svg>
              <span>Share</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  )}

  <aside
    class="fixed left-0 top-[235px] w-[88vw] h-[calc(100vh-240px)] bg-white/95 border-r border-gray-200 shadow-lg transform md:translate-x-0 -translate-x-full transition-transform duration-300 ease-in-out overflow-hidden lg:w-[33vw] md:w-[39vw] sm:w-[69vw]"
    id="sidebar"
  >
    <div class="h-full overflow-y-auto pb-8" id="sidebarContent">
      <div class="p-4 space-y-1">
        <!-- Banner -->
        <div
          class="bg-gray-200 text-white rounded-lg h-58 flex flex-col items-center justify-center"
        >
          <h2 class="text-2xl font-bold text-gray-800 mb-6 mt-2">
            ChipsXP Deployed Projects
          </h2>
          <a
            href="https://ai-assistant-3d-ecommerce-production.up.railway.app/"
            target="_blank"
            rel="noopener noreferrer"
          >
            <div class="mb-8 flex-col justify-center relative">
              <Image
                src={shirtModel}
                alt="3D T-Shirt Model"
                class="w-full h-3/4 object-contain"
              />
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="bg-black/40 backdrop-blur-sm px-4 py-2 rounded-lg">
                  <span
                    class="text-white font-semibold text-lg tracking-wide text-center drop-shadow-lg"
                  >
                    Custom AI 3D T-ShirtS
                  </span>
                </div>
              </div>
            </div>
          </a>
          <a
            href="https://ai-saas-assistant-production.up.railway.app/"
            target="_blank"
            rel="noopener noreferrer"
          >
            <div class="mb-8 flex-col justify-center relative">
              <Image
                src={aiOffice}
                alt="AI Office Assistant"
                class="w-full h-3/4 object-contain"
              />
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="bg-black/40 backdrop-blur-sm px-4 py-2 rounded-lg">
                  <span
                    class="text-white font-semibold text-lg tracking-wide text-center drop-shadow-lg"
                  >
                    AI Office Personal Assistantant
                  </span>
                </div>
              </div>
            </div>
          </a>
          <a
            href="https://ai-image-analyzer-production.up.railway.app/"
            target="_blank"
            rel="noopener noreferrer"
          >
            <div class="mb-8 flex-col justify-center relative">
              <Image
                src={aiAnalyzer}
                alt="AI Image Analyzer"
                class="w-full h-3/4 object-contain"
              />
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="bg-black/40 backdrop-blur-sm px-4 py-2 rounded-lg">
                  <span
                    class="text-white font-semibold text-lg tracking-wide text-center drop-shadow-lg"
                  >
                    Question AI Image Analyzer
                  </span>
                </div>
              </div>
            </div>
          </a>
        </div>
      </div>

      <!-- Categories -->
      <div class="space-y-4">
        <h2
          class="text-2xl font-bold text-gray-900 border-b border-accent/30 pb-2 md:pb-3 pl-4"
        >
          Categories
        </h2>
        <ul class="space-y-2">
          {
            categories.map((category: CategoryDisplay) => {
              const categoryKey = category.toLowerCase() as CategoryKey;
              return (
                <li class="category-container">
                  <button class="w-full flex items-center justify-between p-3 text-gray-700 hover:text-accent hover:bg-accent/5 rounded-md transition-colors md:cursor-pointer cursor-default">
                    <span class="font-medium md:text-xl">{category}</span>
                    <svg
                      class="w-4 h-4 transition-transform duration-200 category-arrow md:block hidden"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>
                  <div class="mt-2 ml-2 mb-4 pl-3 border-l-2 border-accent/20 space-y-2">
                    {postsByCategory[categoryKey].map((post) => (
                      <a
                        href={
                          categoryKey === "advance"
                            ? `/advance/${post.id}`
                            : `/research/${post.id}`
                        }
                        class="block py-2 px-3 md:text-lg text-sm text-gray-600 hover:text-accent hover:bg-accent/5 rounded-md transition-colors truncate"
                      >
                        {post.data.title}
                      </a>
                    ))}
                  </div>
                </li>
              );
            })
          }
        </ul>
      </div>
    </div>

    <script>
      const sidebar = document.getElementById("sidebar");
      const overlay = document.getElementById("overlay");
      const toggleButton = document.getElementById("toggleButton");
      const categoryContainers = document.querySelectorAll(
        ".category-container"
      );

      // Toggle sidebar
      function toggleSidebar() {
        sidebar?.classList.toggle("-translate-x-full");
        overlay?.classList.toggle("opacity-0");
        overlay?.classList.toggle("pointer-events-none");
      }

      toggleButton?.addEventListener("click", toggleSidebar);
      overlay?.addEventListener("click", toggleSidebar);

      // Handle category dropdowns on desktop only
      function setupCategoryDropdowns() {
        if (window.innerWidth <= 768) return;

        categoryContainers.forEach((container) => {
          const button = container.querySelector("button");
          const content = container.querySelector("div");
          const arrow = container.querySelector(".category-arrow");

          if (!content) return;

          // Add hidden class for desktop view
          content.classList.add("hidden");

          button?.addEventListener("click", () => {
            const isExpanded = !content.classList.contains("hidden");

            // Close other dropdowns
            categoryContainers.forEach((otherContainer) => {
              if (otherContainer !== container) {
                const otherContent = otherContainer.querySelector("div");
                const otherArrow =
                  otherContainer.querySelector(".category-arrow");
                otherContent?.classList.add("hidden");
                otherArrow?.classList.remove("rotate-180");
              }
            });

            // Toggle current dropdown
            content.classList.toggle("hidden");
            if (arrow) {
              if (isExpanded) {
                arrow.classList.remove("rotate-180");
              } else {
                arrow.classList.add("rotate-180");
                // Ensure content is visible
                const contentRect = content.getBoundingClientRect();
                const viewportHeight = window.innerHeight;

                if (contentRect.bottom > viewportHeight) {
                  container.scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                  });
                }
              }
            }
          });
        });
      }

      // Initial setup
      setupCategoryDropdowns();

      // Update dropdowns on resize
      window.addEventListener("resize", () => {
        categoryContainers.forEach((container) => {
          const content = container.querySelector("div");
          const arrow = container.querySelector(".category-arrow");

          if (window.innerWidth <= 768) {
            content?.classList.remove("hidden");
            arrow?.classList.remove("rotate-180");
          } else {
            content?.classList.add("hidden");
          }
        });
        setupCategoryDropdowns();
      });

      // Initialize sidebar state based on screen size
      function initializeSidebar() {
        if (window.innerWidth > 768) {
          sidebar?.classList.remove("-translate-x-full");
          overlay?.classList.add("opacity-0", "pointer-events-none");
        } else {
          sidebar?.classList.add("-translate-x-full");
        }
      }

      // Handle window resize
      window.addEventListener("resize", initializeSidebar);

      // Set initial state
      initializeSidebar();

      // Quick Navigation Bar functionality (only for post pages)
      const quickNav = document.getElementById("quickNav");
      const progressBar = document.getElementById("progressBar");
      const progressPercent = document.getElementById("progressPercent");
      const backToTopBtn = document.getElementById("backToTop");
      const shareBtn = document.getElementById("sharePost");

      if (quickNav && progressBar && progressPercent) {
        let isQuickNavVisible = false;
        const headerHeight = 235; // Height after which to show quick nav

        // Calculate reading progress
        function updateReadingProgress() {
          const article = document.querySelector("article");
          if (!article || !progressBar || !progressPercent) return;

          const articleTop = article.offsetTop;
          const articleHeight = article.offsetHeight;
          const viewportHeight = window.innerHeight;
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

          // Calculate progress based on how much of the article has been scrolled through
          const articleStart = articleTop - viewportHeight / 2;
          const articleEnd = articleTop + articleHeight - viewportHeight / 2;
          const progress = Math.max(0, Math.min(100, 
            ((scrollTop - articleStart) / (articleEnd - articleStart)) * 100
          ));

          progressBar.style.width = `${progress}%`;
          progressPercent.textContent = `${Math.round(progress)}%`;
        }

        // Handle scroll events
        function handleScroll() {
          if (!quickNav) return;
          
          const scrollY = window.scrollY;
          
          // Show/hide quick nav based on scroll position
          // Quick nav slides in from the left when scrolling past header height
          if (scrollY > headerHeight && !isQuickNavVisible) {
            quickNav.classList.remove("-translate-x-full", "opacity-0");
            quickNav.classList.add("translate-x-0", "opacity-100");
            isQuickNavVisible = true;
          } else if (scrollY <= headerHeight && isQuickNavVisible) {
            quickNav.classList.add("-translate-x-full", "opacity-0");
            quickNav.classList.remove("translate-x-0", "opacity-100");
            isQuickNavVisible = false;
          }

          // Update reading progress
          updateReadingProgress();
        }

        // Back to top functionality
        if (backToTopBtn) {
          backToTopBtn.addEventListener("click", () => {
            window.scrollTo({
              top: 0,
              behavior: "smooth"
            });
          });
        }

        // Share functionality
        if (shareBtn) {
          shareBtn.addEventListener("click", async () => {
            const url = window.location.href;
            const title = document.title;

            if (navigator.share) {
              // Use native sharing if available
              try {
                await navigator.share({
                  title: title,
                  url: url
                });
              } catch (err) {
                console.log("Share cancelled");
              }
            } else {
              // Fallback to clipboard
              try {
                await navigator.clipboard.writeText(url);
                // Simple feedback - you could enhance this with a toast notification
                const originalText = shareBtn.querySelector("span")?.textContent;
                const spanElement = shareBtn.querySelector("span");
                if (spanElement) {
                  spanElement.textContent = "Copied!";
                  setTimeout(() => {
                    if (spanElement) {
                      spanElement.textContent = originalText || "Share";
                    }
                  }, 2000);
                }
              } catch (err) {
                console.log("Failed to copy to clipboard");
              }
            }
          });
        }

        // Throttled scroll event listener for better performance
        let scrollTimeout: ReturnType<typeof setTimeout>;
        window.addEventListener("scroll", () => {
          if (scrollTimeout) {
            clearTimeout(scrollTimeout);
          }
          scrollTimeout = setTimeout(handleScroll, 10);
        });

        // Initial progress calculation
        updateReadingProgress();
      }
    </script>
  </aside>
</div>
