---
import '../styles/searchbar.css';

---

<div class="search-container">
  <form id="search-form" class="search-form" role="search">
    <input 
      type="search" 
      id="search-input"
      name="search"
      placeholder="Search articles..."
      class="search-input"
      aria-label="Search articles"
    />
    <button type="submit" class="search-button" aria-label="Submit search">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
      </svg>
    </button>
  </form>
</div>



<script is:inline>
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input');

  if (!searchForm || !searchInput) {
    console.error('Search form elements not found');
  } else {
    let searchTimeout;

    const handleSearch = async (e, isImmediate = false) => {
      if (!isImmediate) {
        e.preventDefault();
      }
      
      const query = isImmediate ? e.target.value.toLowerCase() 
                              : searchInput.value.toLowerCase();

      // Clear any existing timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      // For immediate (input) searches, debounce and check length
      if (isImmediate) {
        // Clear any existing timeout
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }
        
        // Only set new timeout if query is long enough
        if (query.length >= 3) {
          searchTimeout = window.setTimeout(async () => {
            await performSearch(query);
          }, 500);
        }
      } else {
        // For form submission, perform search immediately if query is long enough
        if (query.length >= 3) {
          await performSearch(query);
        }
      }
    };

    const performSearch = async (query) => {
      // Only log when actually performing the search
      try {
        console.log('Fetching content...');
        
        // Fetch search index from a dedicated endpoint
        const response = await fetch('/api/search-index.json');
        if (!response.ok) {
          throw new Error('Failed to fetch search index');
        }
        
        const searchIndex = await response.json();
        console.log('Search index loaded:', searchIndex);
        
        const results = searchIndex.filter((entry) => {
          const searchableText = [
            entry.title,
            entry.description,
            entry.authorName,
            entry.authorNickname,
            entry.content
          ].filter(Boolean).join(' ').toLowerCase();
          
          return searchableText.includes(query);
        });

        console.log('Search results:', results);

        // Store results in sessionStorage
        sessionStorage.setItem('searchQuery', query);
        sessionStorage.setItem('searchResults', JSON.stringify(results));
        
        // Navigate to search page with just the query parameter
        const searchUrl = `/search?q=${encodeURIComponent(query)}`;
        console.log('Navigating to:', searchUrl);
        window.location.href = searchUrl;
      } catch (error) {
        console.error('Search error:', error);
      }
    };

    // Handle form submission
    searchForm.addEventListener('submit', (e) => handleSearch(e, false));
    
    // Handle real-time search
    searchInput.addEventListener('input', (e) => handleSearch(e, true));
    
    // Handle Enter key
    searchInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        handleSearch(e, false);
      }
    });
  }
</script>
