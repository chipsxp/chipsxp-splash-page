---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Sidebar from '../components/Sidebar.astro';

type Props = {
	title: string;
	description: string;
	pubDate: Date;
	updatedDate?: Date;
	heroImage?: string | ImageMetadata;
	category?: string;
};

const { title, description, pubDate, updatedDate, heroImage, category } = Astro.props;
const categoryDisplay = category ? category.charAt(0).toUpperCase() + category.slice(1) : '';

// Handle both string paths and direct image imports
const getImage = async () => {
	if (!heroImage) return null;
	if (typeof heroImage === 'object') return heroImage;
	
	const images = import.meta.glob<{ default: ImageMetadata }>('../assets/images/*.{jpeg,jpg,png,gif,webp}');
	const imagePath = `../assets/images/${heroImage}`;
	return images[imagePath] ? (await images[imagePath]()).default : null;
};

const imageImport = await getImage();
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			.layout-container {
				display: flex; 
				min-height: 100vh;
				padding-top: 64px; /* Match header height */
			}
			
			main {
				width: calc(100% - 150px);
				max-width: 100%;
				margin: 0 0 0 150px;
				padding: 1em;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 2em auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				max-width: 100%;
				height: auto;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}

			@media (max-width: 768px) {
				.layout-container {
					flex-direction: column;
					padding-top: 56px;
				}
				main {
					width: 100%;
					margin: 0;
					padding: 0.75em;
				}
				.hero-image {
					padding: 0;
				}
				.hero-image img {
					margin: 1em auto;
					width: 100%;
					max-width: 600px;
				}
				.prose {
					width: 100%;
					max-width: 100%;
					padding: 0.75em;
					padding-left: 5rem; /* Increase space for the hamburger icon */
					font-size: 16px;
					line-height: 1.6;
				}
				.prose h1 {
					font-size: 1.75rem;
					line-height: 1.3;
					margin-bottom: 0.75em;
				}
				.prose h2 {
					font-size: 1.5rem;
					line-height: 1.3;
					margin: 1.5em 0 0.75em;
				}
				.prose h3 {
					font-size: 1.25rem;
					line-height: 1.3;
					margin: 1.5em 0 0.75em;
				}
				.prose p {
					margin-bottom: 1em;
				}
				.title {
					padding: 0.5em 0;
					margin-bottom: 0.75em;
				}
				.category {
					font-size: 0.85em;
					margin-bottom: 0.75em;
				}
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			.category {
				text-align: center;
				color: rgb(var(--gray));
				font-size: 0.9em;
				text-transform: uppercase;
				letter-spacing: 0.05em;
				margin-bottom: 1em;
			}
		</style>
	</head>

	<body>
		<Header />
		<div class="layout-container">
			<Sidebar />
			<main>
			<article>
				<div class="hero-image">
					{imageImport && (
						<Image
							src={imageImport}
							width={918}
							height={516}
							alt=""
							format="webp"
							quality={80}
						/>
					)}
				</div>
				<div class="prose">
					{categoryDisplay && <div class="category">{categoryDisplay}</div>}
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<slot />
				</div>
			</article>
			</main>
		</div>
		<Footer />
	</body>
</html>
